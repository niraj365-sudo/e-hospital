<%- include('./partials/headerAdmin.ejs'); %> <%-
include('./partials/sideMenuAdmin.ejs'); %>

<style>
  #dashboardContainer {
    margin-top: 50px;
  }

  .counter {
    margin-left: 150px;
    background: rgba(44, 42, 42, 0.137);
    color: white;
    border: 3px solid rgba(255, 255, 255, 0.13);
    padding: 20px 0;
    border-radius: 5px;
  }

  .fa-3x {
    margin: 0 auto;
    float: none;
    display: table;
    color: #13bfd6;
  }
</style>

<div id="data">
  <br />
  <div class="container" id="dashboardContainer">
    <div class="row">
      <br />
      <div id="datafield" style="margin-left: 43%">
        <h3 style="color: white">Hello <%-user.name%></h3>
        <p>You can see the contents here</p>
        <br />
      </div>
    </div>
    <div class="row text-center" id="countItems">
      <div class="col">
        <div class="counter card hvr-grow-shadow">
          <i class="fas fa-procedures fa-3x"></i>
          <h2 class="timer" data-to="<%= patientCount%>" data-speed="1500"></h2>
          <p class="lead">Patients</p>
        </div>
      </div>
      <div class="col">
        <div class="counter card hvr-grow-shadow">
          <i class="fas fa-user-md fa-3x"></i>
          <h2 class="timer" data-to="<%= doctorCount%> " data-speed="1500"></h2>
          <p class="lead">Doctors</p>
        </div>
      </div>
      <div class="col">
        <div class="counter card hvr-grow-shadow">
          <i class="fas fa-comment-dots fa-3x"></i>
          <h2
            class="timer"
            data-to="<%= feedbackCount%>"
            data-speed="1500"
          ></h2>
          <p class="lead">Feedbacks</p>
        </div>
      </div>
    </div>
  </div>
</div>

<script src="//cdnjs.cloudflare.com/ajax/libs/jquery/3.2.1/jquery.min.js"></script>
<script>
  (function ($) {
    $.fn.countTo = function (options) {
      options = options || {};

      return $(this).each(function () {
        // set options for current element
        var settings = $.extend(
          {},
          $.fn.countTo.defaults,
          {
            from: $(this).data("from"),
            to: $(this).data("to"),
            speed: $(this).data("speed"),
            refreshInterval: $(this).data("refresh-interval"),
            decimals: $(this).data("decimals"),
          },
          options
        );

        // how many times to update the value, and how much to increment the value on each update
        var loops = Math.ceil(settings.speed / settings.refreshInterval),
          increment = (settings.to - settings.from) / loops;

        // references & variables that will change with each update
        var self = this,
          $self = $(this),
          loopCount = 0,
          value = settings.from,
          data = $self.data("countTo") || {};

        $self.data("countTo", data);

        // if an existing interval can be found, clear it first
        if (data.interval) {
          clearInterval(data.interval);
        }
        data.interval = setInterval(updateTimer, settings.refreshInterval);

        // initialize the element with the starting value
        render(value);

        function updateTimer() {
          value += increment;
          loopCount++;

          render(value);

          if (typeof settings.onUpdate == "function") {
            settings.onUpdate.call(self, value);
          }

          if (loopCount >= loops) {
            // remove the interval
            $self.removeData("countTo");
            clearInterval(data.interval);
            value = settings.to;

            if (typeof settings.onComplete == "function") {
              settings.onComplete.call(self, value);
            }
          }
        }

        function render(value) {
          var formattedValue = settings.formatter.call(self, value, settings);
          $self.html(formattedValue);
        }
      });
    };

    $.fn.countTo.defaults = {
      from: 0, // the number the element should start at
      to: 0, // the number the element should end at
      speed: 1000, // how long it should take to count between the target numbers
      refreshInterval: 100, // how often the element should be updated
      decimals: 0, // the number of decimal places to show
      formatter: formatter, // handler for formatting the value before rendering
      onUpdate: null, // callback method for every time the element is updated
      onComplete: null, // callback method for when the element finishes updating
    };

    function formatter(value, settings) {
      return value.toFixed(settings.decimals);
    }
  })(jQuery);

  jQuery(function ($) {
    // custom formatting example
    $(".count-number").data("countToOptions", {
      formatter: function (value, options) {
        return value
          .toFixed(options.decimals)
          .replace(/\B(?=(?:\d{3})+(?!\d))/g, ",");
      },
    });

    // start all the timers
    $(".timer").each(count);

    function count(options) {
      var $this = $(this);
      options = $.extend({}, options || {}, $this.data("countToOptions") || {});
      $this.countTo(options);
    }
  });
</script>
